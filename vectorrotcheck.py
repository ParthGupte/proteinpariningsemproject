from proteinhelper import *

prot = Structure(np.array([[1,0,0]],dtype=np.float64),np.array([[[1,0,0],[0,1,0],[0,0,1]]],dtype=np.float64))   
protB = Structure(prot.points.copy(),prot.vectors.copy())
r = R.from_rotvec((mt.pi/4)*np.array([0,0,1]))
protB.rotate(r)
print(protB.points,protB.vectors)
pair = Pairing([0],prot,protB)
pair.display('g','r')
vectorsA = Structure(np.concatenate((prot.vectors[0],-prot.vectors[0]))) #so that the translation component of kersley get cancelled and we can work with only rotations
vectorsB = Structure(np.concatenate((protB.vectors[0],-protB.vectors[0])))
print("Initial RMSD of the structure",pair.rmsd())
print("vectors of A",vectorsA.points)
print("vectors of B",vectorsB.points)
pair_vecAB = Pairing([0,1,2,3,4,5],vectorsA,vectorsB)
pair_vecAB.display('g','r')
rmsd, trans, rot = pair_vecAB.kearsley()
print("RMSD of vectors after superposion",rmsd)
print(rot.as_rotvec())
protB.rotate(rot)
pair_match = Pairing([0],prot,protB)
pair_match.hungarian()
rmsd = pair_match.rmsd()
pair_match.display('g','r')
print("Final RMSD of superposition",rmsd)